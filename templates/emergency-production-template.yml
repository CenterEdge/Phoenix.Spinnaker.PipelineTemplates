schema: "1"
id: phoenix-emergency-production-template
protect: false
configuration:
  concurrentExecutions:
    limitConcurrent: true
    parallel: false
  notifications:
  - address: phoenixdev-ci
    level: pipeline
    message:
      pipeline.failed:
        text: "Pipeline Failure... @channel"
    name: slack0
    type: slack
    when:
    - pipeline.starting
    - pipeline.complete
    - pipeline.failed
variables:
- name: application
  description: The name of the application to scope this pipeline to
- name: loadbalancer
  description: The name of the load balancer for clusters created by this pipeline
- name: clustername
  description: The name of cluster that contains the k8s pods generated by this pipeline
- name: gcrimage
  description: The GCR image of the container to run
- name: gcrrepo
  description: The GCR repository to connect to
- name: podAnnotations
  type: object
  defaultValue: {}
  description: The annotations to assign to production pods
- name: product
  description: The name of the product this deployment belongs to
  defaultValue: Phoenix
- name: requestcpu
  description: The amount of CPU requested
  defaultValue: 100m
- name: requestmem
  description: The amount of Memory requested
  defaultValue: 512Mi
- name: maxcpu
  description: The CPU limit for a given pod
  defaultValue: 200m
- name: maxmem
  description: The Memory limit for a pod
  defaultValue: 1024Mi
- name: statsdSampleRate
  description: The percentage of requests to log to statsd. Set to 0 to disable
  defaultValue: 100
- name: shawarmaEnabled
  description: Enables the Shawarma sidecar injector, linked to the configured load balancer
  defaultValue: false
  type: boolean
stages:
- config:
    instructions: Confirm that this microservice should be deployed without running smoke tests
    isNew: true
    judgmentInputs:
    - value: Approve
    - value: Deny
  id: phoenix-production-manualjudgment
  name: Manual Judgment
  type: manualJudgment
- config:
    stageEnabled:
      expression: "#judgment('Manual Judgment').equals('Approve')"
      type: expression
    clusters:
    - account: phoenix
      application: "{{ application }}"
      capacity:
        desired: 2
        max: 9
        min: 2
      cloudProvider: kubernetes
      containers:
      - args: []
        command: []
        envVars:
        - name: ASPNETCORE_ENVIRONMENT
          value: Production
        - name: Statsd__Config__StatsdServerName
          envSource:
            fieldRef:
              fieldPath: status.hostIP
        - name: Statsd__Enabled
          value: "true"
        - envSource:
            configMapSource:
              configMapName: businessentities-api
              key: url
          name: BusinessEntities__Host
        - envSource:
            configMapSource:
              configMapName: mappings-api
              key: url
          name: Mappings__Host
        - envSource:
            configMapSource:
              configMapName: productcatalogs-api
              key: url
          name: ProductCatalogs__Host
        - envSource:
            configMapSource:
              configMapName: pdf-api
              key: url
          name: HtmlToPdf__Host
        - envSource:
            secretSource:
              key: connectionString
              secretName: couchbase-primary
          name: Couchbase__ConnectionString
        - envSource:
            secretSource:
              key: username
              secretName: couchbase-primary
          name: Couchbase__Username
        - envSource:
            secretSource:
              key: password
              secretName: couchbase-primary
          name: Couchbase__Password
        - name: ASPNETCORE_URLS
          value: http://*:80/
        - envSource:
            configMapSource:
              configMapName: rabbitmq
              key: host
          name: RabbitMQ__Hosts__0__Host
        - envSource:
            configMapSource:
              configMapName: rabbitmq
              key: username
          name: RabbitMQ__Username
        - envSource:
            secretSource:
              key: default-pass
              secretName: rabbitmq-config
          name: RabbitMQ__Password
        - envSource:
            secretSource:
              key: key
              secretName: feature-flag-key
          name: LaunchDarklyOptions__SdkKey
        - envSource:
            configMapSource:
              configMapName: timeouts
              key: keepalive
          name: TimeoutOptions__KeepAliveTimeout
        - envSource:
            configMapSource:
              configMapName: timeouts
              key: connect_read_write
          name: TimeoutOptions__WaiverUploadTimeout
        - envSource:
            configMapSource:
              configMapName: timeouts
              key: keepalive
          name: WaiverUploadOptions__KeepAliveTimeout
        imageDescription:
          fromTrigger: true
          account: gcr-phoenix
          imageId: "{{ gcrimage }}"
          registry: us.gcr.io
          repository: "{{ gcrrepo }}"
        imagePullPolicy: IFNOTPRESENT
        limits:
          cpu: "{{ maxcpu }}"
          memory: "{{ maxmem }}"
        livenessProbe:
          failureThreshold: 3
          handler:
            execAction:
              commands: []
            httpGetAction:
              path: /health?type=ready
              port: 80
              uriScheme: HTTP
            tcpSocketAction:
              port: 80
            type: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: "phoenix-{{ application }}-image"
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          handler:
            execAction:
              commands: []
            httpGetAction:
              path: /health?type=ready
              port: 80
              uriScheme: HTTP
            tcpSocketAction:
              port: 80
            type: HTTP
          initialDelaySeconds: 15
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        requests:
          cpu: "{{ requestcpu }}"
          memory: "{{ requestmem }}"
        volumeMounts: []
      deployment:
        deploymentStrategy:
          rollingUpdate:
            maxSurge: 1
            maxUnavailable: 1
          type: RollingUpdate
        enabled: false
        minReadySeconds: 0
      dnsPolicy: ClusterFirst
      freeFormDetails: api
      interestingHealthProviderNames:
      - KubernetesContainer
      - KubernetesPod
      loadBalancers:
      - "{{ loadbalancer }}"
      namespace: default
      nodeSelector: {}
      podAnnotations: |
        {% if not shawarmaEnabled -%}
        {{ podAnnotations }}
        {% elif podAnnotations == '{}' -%}
        {"shawarma.centeredge.io/service-name": "{{ loadbalancer }}"}
        {% else -%}
        {{ podAnnotations.substring(0, podAnnotations.length()-1) }}, "shawarma.centeredge.io/service-name": "{{ loadbalancer }}"}
        {%- endif %}
      provider: kubernetes
      region: default
      replicaSetAnnotations: {}
      scalingPolicy:
        cpuUtilization:
          target: 40
      stack: prod
      strategy: ""
      targetSize: 3
      terminationGracePeriodSeconds: 30
      volumeSources: []
    overrideTimeout: true
    stageTimeoutMs: 600000
  dependsOn:
  - phoenix-production-manualjudgment
  id: phoenix-production-deploy
  inheritanceControl: {}
  inject: {}
  name: Deploy Production
  type: deploy
- config:
    cloudProvider: kubernetes
    cloudProviderType: kubernetes
    cluster: "{{ clustername }}"
    credentials: phoenix
    interestingHealthProviderNames:
    - KubernetesService
    namespaces:
    - default
    preferLargerOverNewer: "false"
    remainingEnabledServerGroups: 1
  dependsOn:
  - phoenix-production-deploy
  id: phoenix-production-disablecluster
  inheritanceControl: {}
  inject: {}
  name: Disable Cluster
  type: disableCluster
- config:
    allowDeleteActive: false
    cloudProvider: kubernetes
    cloudProviderType: kubernetes
    cluster: "{{ clustername }}"
    credentials: phoenix
    namespaces:
    - default
    retainLargerOverNewer: "false"
    shrinkToSize: 2
  dependsOn:
  - phoenix-production-disablecluster
  id: phoenix-production-shrinkcluster
  inheritanceControl: {}
  inject: {}
  name: Shrink Cluster
  type: shrinkCluster
- config:
    alias: preconfiguredWebhook
    parameterValues:
      alertType: info
      environment: "{{ clustername }}"
      product: "{{ product }}"
      text: "Start Deploy of {{ application }} to {{ clustername }}"
      title: "Start Deploy of {{ application }} to {{ clustername }}"
    statusUrlResolution: getMethod
  dependsOn:
  - phoenix-production-manualjudgment
  id: pipelineevent-start-deployment
  inheritanceControl: {}
  inject: {}
  name: Publish Start Event
  type: datadogEvent
- config:
    alias: preconfiguredWebhook
    parameterValues:
      alertType: success
      environment: "{{ clustername }}"
      product: "{{ product }}"
      text: "Deployed image {{ gcrimage }} of {{ application }} to {{ clustername }} 'Deploy Duration:' ${new java.text.SimpleDateFormat('HH:mm:ss').format(#stage('Deploy Production').endTime - execution['startTime'])}"
      title: "Deployed {{ application }} to {{ clustername }}"
    stageEnabled:
      expression: "#stage('Deploy Production').status.toString() == 'SUCCEEDED'"
      type: expression
    statusUrlResolution: getMethod
  dependsOn:
  - phoenix-production-deploy
  id: pipelineevent-success
  inheritanceControl: {}
  inject: {}
  name: Publish Success Event
  type: datadogEvent
- config:
    alias: preconfiguredWebhook
    failOnFailedExpressions: true
    parameterValues:
      alertType: error
      environment: "{{ clustername }}"
      product: "{{ product }}"
      text: "Failed to deploy image {{ gcrimage }} of {{ application }} to {{ clustername }} 'Deploy Duration:' ${new java.text.SimpleDateFormat('HH:mm:ss').format(#stage('Deploy Production').endTime - execution['startTime'])}"
      title: "Failed to deploy {{ application }} to {{ clustername }}"
    stageEnabled:
      expression: "#stage('Deploy Production').status.toString() != 'SUCCEEDED'"
      type: expression
    statusUrlResolution: getMethod
  dependsOn:
  - phoenix-production-deploy
  id: pipelineevent-failed
  inheritanceControl: {}
  inject: {}
  name: Publish Failed Event
  type: datadogEvent