schema: "1"
id: phoenix-tempsmoketest-template
protect: false
configuration:
  concurrentExecutions:
    limitConcurrent: true
    parallel: false
variables:
- name: application
  description: The name of the application to scope this pipeline to
- name: loadbalancer
  description: The name of the load balancer for clusters created by this pipeline
- name: clustername
  description: The name of cluster that contains the k8s pods generated by this pipeline
- name: gcrimage
  description: The GCR image of the container to run
- name: gcrrepo
  description: The GCR repository to connect to
- name: gcrimagetag
  description: The tag of the image you want to run
  defaultValue: latest
- name: podAnnotations
  type: object
  defaultValue: {}
  description: The annotations to assign to pods
- name: statsdSampleRate
  description: The percentage of requests to log to statsd. Set to 0 to disable
  defaultValue: 100 
stages:
- config:
    clusters:
    - account: phoenix
      application: "{{ application }}"
      cloudProvider: kubernetes
      containers:
      - args: []
        command: []
        envVars:
        - name: ASPNETCORE_ENVIRONMENT
          value: Staging
        - envSource:
            secretSource:
              key: url
              secretName: couchbase-primary
          name: Couchbase__Servers__0
        - name: ASPNETCORE_URLS
          value: http://localhost:8080/
        - envSource:
            secretSource:
              key: username
              secretName: couchbase-primary
          name: Couchbase__Username
        - envSource:
            secretSource:
              key: password
              secretName: couchbase-primary
          name: Couchbase__Password
        - envSource:
            configMapSource:
              configMapName: rabbitmq
              key: host
          name: RabbitMQ__Hosts__0__Host
        - envSource:
            configMapSource:
              configMapName: rabbitmq
              key: username
          name: RabbitMQ__Username
        - envSource:
            secretSource:
              key: default-pass
              secretName: rabbitmq-config
          name: RabbitMQ__Password
        - envSource:
            configMapSource:
              configMapName: businessentities-api
              key: url
          name: BusinessEntities__Host
        - envSource:
            configMapSource:
              configMapName: mappings-api
              key: url
          name: Mappings__Host
        - envSource:
            configMapSource:
              configMapName: productcatalogs-api
              key: url
          name: ProductCatalogs__Host
        - envSource:
            configMapSource:
              configMapName: pdf-api
              key: url
          name: HtmlToPdf__Host
        - envSource:
            secretSource:
              key: clientId
              secretName: cognito-creds
          name: COGNITO__ClientId
        - envSource:
            secretSource:
              key: clientSecret
              secretName: cognito-creds
          name: COGNITO__ClientSecret
        - envSource:
            secretSource:
              key: poolId
              secretName: cognito-creds
          name: COGNITO__UserPoolId
        - envSource:
            secretSource:
              key: region
              secretName: cognito-creds
          name: COGNITO__Region
        - envSource:
            secretSource:
              key: defaultTempPass
              secretName: cognito-creds
          name: COGNITO__DefaultTemporaryPassword
        - envSource:
            secretSource:
              key: key
              secretName: feature-flag-key
          name: LaunchDarklyOptions__SdkKey
        imageDescription:
          account: gcr-phoenix
          imageId: "{{ gcrimage }}"
          registry: us.gcr.io
          repository: "{{ gcrrepo }}"
          tag: "{{ gcrimagetag }}"
        imagePullPolicy: IFNOTPRESENT
        limits: {}
        livenessProbe:
          failureThreshold: 3
          handler:
            execAction:
              commands: []
            httpGetAction:
              path: /health
              port: 80
              uriScheme: HTTP
            tcpSocketAction:
              port: 80
            type: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: "{{ application }}-smoketest-container"
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          handler:
            execAction:
              commands: []
            httpGetAction:
              httpHeaders: []
              path: /health?type=ready
              port: 80
              uriScheme: HTTP
            tcpSocketAction:
              port: 80
            type: HTTP
          initialDelaySeconds: 15
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        requests: {}
        volumeMounts: []
      - args: []
        command: []
        envVars:
        - name: API_GATEWAY_KEY
          envSource:
            secretSource:
              key: key
              secretName: api-gateway
        - name: STATSD_SERVER
          envSource:
            fieldRef:
              fieldPath: status.hostIP
        - name: STATSD_SAMPLE_RATE
          value: "{{ statsdSampleRate }}"
        - name: SERVICE_NAME
          value: "staging.{{ application }}"
        imageDescription:
          account: gcr-phoenix
          imageId: us.gcr.io/phoenix-177420/nginx-proxy:9
          registry: us.gcr.io
          repository: phoenix-177420/nginx-proxy
          tag: "9"
        imagePullPolicy: IFNOTPRESENT
        limits: {}
        name: nginx-proxy
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        requests: {}
        volumeMounts: []
      deployment:
        deploymentStrategy:
          rollingUpdate:
            maxSurge: 1
            maxUnavailable: 1
          type: RollingUpdate
        enabled: false
        minReadySeconds: 0
      dnsPolicy: ClusterFirst
      freeFormDetails: temp
      interestingHealthProviderNames:
      - KubernetesContainer
      - KubernetesPod
      loadBalancers:
      - "{{ loadbalancer }}"
      namespace: default
      nodeSelector: {}
      podAnnotations: "{{ podAnnotations }}"
      provider: kubernetes
      region: default
      replicaSetAnnotations: {}
      stack: staging
      strategy: ""
      targetSize: 1
      terminationGracePeriodSeconds: 30
      volumeSources: []
    overrideTimeout: true
    stageTimeoutMs: 300000
  id: "phoenix-{{ application }}-tempsmoketest-deploy"
  inheritanceControl: {}
  inject: {}
  name: Deploy
  type: deploy
- config:
    allowDeleteActive: false
    cloudProvider: kubernetes
    cloudProviderType: kubernetes
    cluster: "{{ clustername }}"
    credentials: phoenix
    namespaces:
    - default
    retainLargerOverNewer: "false"
    shrinkToSize: 1
  dependsOn:
  - "phoenix-{{ application }}-tempsmoketest-deploy"
  id: "phoenix-{{ application }}-tempsmoketest-shrinkcluster"
  inheritanceControl: {}
  inject: {}
  name: Shrink Cluster
  type: shrinkCluster
