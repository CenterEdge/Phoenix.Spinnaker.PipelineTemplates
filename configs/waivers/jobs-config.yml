schema: "1"
pipeline:
  application: waivers
  name: Waivers Production Jobs
  id: phnx-waivers-prod-jobs
  template:
    source: https://raw.githubusercontent.com/CenterEdge/Phoenix.Spinnaker.PipelineTemplates/PHNX-2941/templates/production-template.yml
  variables:
    application: waivers
    loadbalancer: waivers-prod-api
    clustername: waivers-prod-api
    stagingloadbalancer: waivers-staging-api
    stagingclustername: waivers-staging-api
    jobsloadbalancer: waivers-prod-jobs
    jobsclustername: waivers-prod-jobs
    imagenamepattern: .*waivers.*
    smoketestjob: Phoenix/job/Services/job/Phoenix.Service.Waivers/job/Phoenix.Service.Waivers.Smoke
    gcrrepo: phoenix-177420/phoenix-service-waivers
    gcrimage: us.gcr.io/phoenix-177420/phoenix-service-waivers
    podAnnotations: "{ iam.amazonaws.com/role: PhoenixWaiversSvc, environment: prod }"
    podAnnotationsStaging: "{ iam.amazonaws.com/role: PhoenixWaiversSvc, environment: staging }"
    podAnnotationsProdJobs: "{ iam.amazonaws.com/role: PhoenixWaiversSvc, environment: prod }"
    maxmem: 4096Mi
  metadata:
    description: The Waivers Production Jobs Pipeline Config
    name: Waivers-Production-Jobs
    owner: gbaker@centeredgesoftware.com
    scopes:
    - waivers
configuration:
  inherit: ['concurrentExecutions', 'parameters', 'notifications']
  triggers:
  - account: gcr-phoenix
    enabled: true
    organization: phoenix-177420
    registry: us.gcr.io
    repository: phoenix-177420/phoenix-service-waivers
    runAsUser: phoenix-svc-account
    type: docker
stages:
- config:
    clusters:
    - account: phoenix
      application: "{{ application }}"
      capacity:
        desired: 2
        max: 9
        min: 2
      cloudProvider: kubernetes
      cluster: "{{jobsclustername}}"
      containers:
      - args: []
        command: []
        envVars:
        - name: ASPNETCORE_ENVIRONMENT
          value: Production
        - envSource:
            configMapSource:
              configMapName: businessentities-api
              key: url
          name: BusinessEntities__Host
        - envSource:
            configMapSource:
              configMapName: mappings-api
              key: url
          name: Mappings__Host
        - envSource:
            configMapSource:
              configMapName: productcatalogs-api
              key: url
          name: ProductCatalogs__Host
        - envSource:
            configMapSource:
              configMapName: pdf-api
              key: url
          name: HtmlToPdf__Host
        - envSource:
            secretSource:
              key: url
              secretName: couchbase-primary
          name: Couchbase__Servers__0
        - envSource:
            secretSource:
              key: username
              secretName: couchbase-primary
          name: Couchbase__Username
        - envSource:
            secretSource:
              key: password
              secretName: couchbase-primary
          name: Couchbase__Password
        - name: ASPNETCORE_URLS
          value: http://localhost:8080/
        - envSource:
            configMapSource:
              configMapName: rabbitmq
              key: host
          name: RabbitMQ__Hosts__0__Host
        - envSource:
            configMapSource:
              configMapName: rabbitmq
              key: username
          name: RabbitMQ__Username
        - envSource:
            secretSource:
              key: default-pass
              secretName: rabbitmq-config
          name: RabbitMQ__Password
        - envSource:
            configMapSource:
              configMapName: waiver-upload-options
              key: timeout
          name: WaiverUploadOptions__KeepAliveTimeout
        - name: JobOptions__ProcessBulkJobs
          value: true
        imageDescription:
          account: gcr-phoenix
          fromTrigger: true
          imageId: "{{ gcrimage }}"
          registry: us.gcr.io
          repository: "{{ gcrrepo }}"
        imagePullPolicy: IFNOTPRESENT
        limits:
          cpu: "{{ maxcpu }}"
          memory: "{{ maxmem }}"
        livenessProbe:
          failureThreshold: 3
          handler:
            execAction:
              commands: []
            httpGetAction:
              path: /health
              port: 80
              uriScheme: HTTP
            tcpSocketAction:
              port: 80
            type: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: "phoenix-{{ application }}-image"
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          handler:
            execAction:
              commands: []
            httpGetAction:
              path: /health?type=ready
              port: 80
              uriScheme: HTTP
            tcpSocketAction:
              port: 80
            type: HTTP
          initialDelaySeconds: 15
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        requests:
          cpu: "{{ requestcpu }}"
          memory: "{{ requestmem }}"
        volumeMounts: []
      - args: []
        command: []
        envVars:
        - name: STATSD_SERVER
          envSource:
            fieldRef:
              fieldPath: status.hostIP
        - name: STATSD_SAMPLE_RATE
          value: "{{ statsdSampleRate }}"
        - name: SERVICE_NAME
          value: "prod.{{ application }}"
        - envSource:
            configMapSource:
              configMapName: waiver-upload-options
              key: timeout
          name: WaiverUploadOptions__KeepAliveTimeout
        - envSource:
            configMapSource:
              configMapName: waiver-upload-options
              key: max_size
          name: WaiverUploadOptions__MaxRequestSize
        imageDescription:
          account: gcr-phoenix
          imageId: us.gcr.io/phoenix-177420/nginx-proxy:19
          registry: us.gcr.io
          repository: phoenix-177420/nginx-proxy
          tag: "19"
        imagePullPolicy: IFNOTPRESENT
        limits:
          cpu: "{{ maxcpu }}"
          memory: "{{ maxmem }}"
        name: phoenix-177420-nginx-proxy
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        requests:
          cpu: "{{ requestcpu }}"
          memory: "{{ requestmem }}"
        volumeMounts: []
      deployment:
        deploymentStrategy:
          rollingUpdate:
            maxSurge: 1
            maxUnavailable: 1
          type: RollingUpdate
        enabled: false
        minReadySeconds: 0
      dnsPolicy: ClusterFirst
      freeFormDetails: api
      interestingHealthProviderNames:
      - KubernetesContainer
      - KubernetesPod
      loadBalancers:
      - "{{ jobsloadbalancer }}"
      namespace: default
      nodeSelector: {}
      podAnnotations: "{{ podAnnotationsProdJobs }}"
      provider: kubernetes
      region: default
      replicaSetAnnotations: {}
      scalingPolicy:
        cpuUtilization:
          target: 40
      stack: prod
      strategy: ""
      targetSize: 3
      terminationGracePeriodSeconds: 30
      volumeSources: []
    overrideTimeout: true
    stageTimeoutMs: 600000
    stageEnabled:
      expression: "#stage('Smoke Test')['context']['buildInfo']['result']=='SUCCESS'"
      type: expression
  id: phoenix-production-jobs-deploy
  inheritanceControl: {}
  inject:
    after:
    - phoenix-production-deploy
  name: Deploy Production Jobs
  type: deploy
